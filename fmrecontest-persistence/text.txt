package mx.fmre.rttycontest.recibir.test;

import static org.junit.Assert.assertNotNull;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;

import org.junit.Ignore;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;

import mx.fmre.rttycontest.exception.FmreContestException;
import mx.fmre.rttycontest.persistence.enums.EmailEstatusEnum;
import mx.fmre.rttycontest.persistence.model.AttachedFile;
import mx.fmre.rttycontest.persistence.model.Contest;
import mx.fmre.rttycontest.persistence.model.Edition;
import mx.fmre.rttycontest.persistence.model.Email;
import mx.fmre.rttycontest.persistence.model.EmailAccount;
import mx.fmre.rttycontest.persistence.model.EmailStatus;
import mx.fmre.rttycontest.persistence.repository.IContestRepository;
import mx.fmre.rttycontest.persistence.repository.IEditionRepository;
import mx.fmre.rttycontest.persistence.repository.IEmailEstatusRepository;
import mx.fmre.rttycontest.persistence.repository.IEmailRepository;
import mx.fmre.rttycontest.recibir.RecibirApplication;
import mx.fmre.rttycontest.recibir.dto.AttachedFileDTO;
import mx.fmre.rttycontest.recibir.helper.EncryptDecryptStringHelper;
import mx.fmre.rttycontest.recibir.helper.MailHelper;
import mx.fmre.rttycontest.recibir.services.IFileManagerService;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = RecibirApplication.class)
@TestPropertySource(locations = "classpath:application.properties")
public class IFileManagerServiceTest {

	private IFileManagerService fileManagerService;

	@Autowired
	private ApplicationContext appContext;

	@Value("${fileManagerImpl}")
	private String fileManagerImpl;

	@Autowired
	private IContestRepository contestRepository;

	@Value("${email.password.encodingkey}")
	private String emailPasswordEncodingkey;

	@Autowired
	private IEditionRepository editionRepository;

	@Autowired
	private IEmailRepository emailRepository;

	@Autowired
	private IEmailEstatusRepository emailEstatusRepository;

	@Value("${email.fields.to.legth}")
	private int emailFieldsToLenght;

	@Test
	@Ignore
	void test() {
		Contest contest = contestRepository.findById(1).orElse(null);
		Edition edition = editionRepository.findById(1).orElse(null);
		EmailStatus emailEstatusRecived = emailEstatusRepository
				.findById(EmailEstatusEnum.RECIVED.getId())
				.orElse(null);

		EncryptDecryptStringHelper encryptDecryptStringHelper = null;

		EmailAccount emailAccount = contest.getEmailAccount();
		try {
			encryptDecryptStringHelper = new EncryptDecryptStringHelper(emailPasswordEncodingkey);

			Session session = Session.getDefaultInstance(new Properties());
			Store store = session.getStore("imaps");
			store.connect(
					emailAccount.getSmtpServer(), 
					emailAccount.getPort(), 
					emailAccount.getEmailAddress(),
					encryptDecryptStringHelper.decrypt(emailAccount.getPassword()));
			Folder inbox = store.getFolder("INBOX");
			inbox.open(Folder.READ_ONLY);

			List<Integer> saved;
			if (edition.getEmailEnd() != null)
				saved = emailRepository.getEmailCountsSaved(edition.getEmailStart(), edition.getEmailEnd(),
						edition.getId());
			else
				saved = emailRepository.getEmailCountsSaved(edition.getEmailStart(), edition.getId());
			int maxIdEmailSaved = saved.stream().mapToInt(v -> v).max().orElse(0);
			int messageCount = inbox.getMessageCount();

			int maxIdEmail = messageCount > maxIdEmailSaved ? messageCount : maxIdEmailSaved;

			List<Integer> shouldBeSaved = IntStream.iterate(edition.getEmailStart(), x -> x + 1)
					.limit(maxIdEmail - edition.getEmailStart() + 1).boxed().collect(Collectors.toList());
			shouldBeSaved.removeAll(saved);

			if (shouldBeSaved.isEmpty())
				return;

			int upperLimit = 10 < shouldBeSaved.size() ? 10 : shouldBeSaved.size();
			List<Integer> listToDownload = shouldBeSaved.subList(0, upperLimit);
			int[] intArray = new int[listToDownload.size()];
			for (int i = 0; i < listToDownload.size(); i++) {
				intArray[i] = listToDownload.get(i);
			}

			Message[] messages = inbox.getMessages(intArray);

			Message message = messages[0];

			List<AttachedFileDTO> attachedFilesDTO = MailHelper.getAttachedFiles(message);
			Email email = MailHelper.messageToEmailMapper(edition, message, emailFieldsToLenght, emailEstatusRecived);
			List<AttachedFile> attachedFiles = new ArrayList<>();

			AttachedFileDTO attachedFileDTO = attachedFilesDTO.get(0);
			AttachedFile attachedFile = MailHelper.attachedFileDTOToAttachedFile(attachedFileDTO);
			attachedFile.setEmail(email);

			String bucketPath = fileManagerService.saveFile(email, attachedFileDTO);
			attachedFile.setPath(bucketPath);
			attachedFiles.add(attachedFile);

			email.setAttachedFiles(attachedFiles);
			emailRepository.save(email);

			fileManagerService = appContext.getBean(fileManagerImpl, IFileManagerService.class);
			try {
				assertNotNull(fileManagerService.saveFile(email, attachedFileDTO));
			} catch (FmreContestException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (FmreContestException | IOException | MessagingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

}
